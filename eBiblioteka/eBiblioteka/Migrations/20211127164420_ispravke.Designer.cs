// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eBiblioteka.DB;

namespace eBiblioteka.Migrations
{
    [DbContext(typeof(MojDbContext))]
    [Migration("20211127164420_ispravke")]
    partial class ispravke
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eBiblioteka.Database.Biblioteka", b =>
                {
                    b.Property<int>("BibliotekaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Aktivan")
                        .HasColumnType("bit");

                    b.Property<string>("BrojTelefona")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VrsteBibliotekaID")
                        .HasColumnType("int");

                    b.HasKey("BibliotekaID");

                    b.HasIndex("GradID");

                    b.HasIndex("VrsteBibliotekaID");

                    b.ToTable("Biblioteka");
                });

            modelBuilder.Entity("eBiblioteka.Database.Clan", b =>
                {
                    b.Property<int>("ClanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Aktivan")
                        .HasColumnType("bit");

                    b.Property<int>("BibliotekaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lozinka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UlogaID")
                        .HasColumnType("int");

                    b.HasKey("ClanID");

                    b.HasIndex("BibliotekaID");

                    b.HasIndex("GradID");

                    b.HasIndex("UlogaID");

                    b.ToTable("Clan");
                });

            modelBuilder.Entity("eBiblioteka.Database.Clanarina", b =>
                {
                    b.Property<int>("ClanarinaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClanID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumUplate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Iznos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipClanarineID")
                        .HasColumnType("int");

                    b.HasKey("ClanarinaID");

                    b.HasIndex("ClanID");

                    b.HasIndex("TipClanarineID");

                    b.ToTable("Clanarina");
                });

            modelBuilder.Entity("eBiblioteka.Database.Drzava", b =>
                {
                    b.Property<int>("DrzavaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrzavaID");

                    b.ToTable("Drzava");
                });

            modelBuilder.Entity("eBiblioteka.Database.Grad", b =>
                {
                    b.Property<int>("GradID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrzavaID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GradID");

                    b.HasIndex("DrzavaID");

                    b.ToTable("Grad");
                });

            modelBuilder.Entity("eBiblioteka.Database.Knjiga", b =>
                {
                    b.Property<int>("KnjigaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BibliotekaID")
                        .HasColumnType("int");

                    b.Property<bool>("Dostupna")
                        .HasColumnType("bit");

                    b.Property<DateTime>("GodinaIzdavanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ZanrID")
                        .HasColumnType("int");

                    b.HasKey("KnjigaID");

                    b.HasIndex("BibliotekaID");

                    b.HasIndex("ZanrID");

                    b.ToTable("Knjiga");
                });

            modelBuilder.Entity("eBiblioteka.Database.KnjigaPisac", b =>
                {
                    b.Property<int>("KnjigaPisacID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KnjigaID")
                        .HasColumnType("int");

                    b.Property<int>("PisacID")
                        .HasColumnType("int");

                    b.HasKey("KnjigaPisacID");

                    b.HasIndex("KnjigaID");

                    b.HasIndex("PisacID");

                    b.ToTable("KnjigaPisac");
                });

            modelBuilder.Entity("eBiblioteka.Database.KnjigaZanr", b =>
                {
                    b.Property<int>("KnjigaZanrID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KnjigaID")
                        .HasColumnType("int");

                    b.Property<int>("KnjigaKategorijaID")
                        .HasColumnType("int");

                    b.Property<int>("ZanrID")
                        .HasColumnType("int");

                    b.HasKey("KnjigaZanrID");

                    b.HasIndex("KnjigaID");

                    b.HasIndex("ZanrID");

                    b.ToTable("KnjigaZanr");
                });

            modelBuilder.Entity("eBiblioteka.Database.Pisac", b =>
                {
                    b.Property<int>("PisacID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biografija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PisacID");

                    b.ToTable("Pisac");
                });

            modelBuilder.Entity("eBiblioteka.Database.RezervacijaKnjige", b =>
                {
                    b.Property<int>("RezervacijaKnjigeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClanID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumRezervacije")
                        .HasColumnType("datetime2");

                    b.Property<int>("KnjigaID")
                        .HasColumnType("int");

                    b.HasKey("RezervacijaKnjigeID");

                    b.HasIndex("ClanID");

                    b.HasIndex("KnjigaID");

                    b.ToTable("RezervacijaKnjige");
                });

            modelBuilder.Entity("eBiblioteka.Database.TipClanarine", b =>
                {
                    b.Property<int>("TipClanarineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipClanarineID");

                    b.ToTable("TipClanarine");
                });

            modelBuilder.Entity("eBiblioteka.Database.Uloga", b =>
                {
                    b.Property<int>("UlogaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UlogaID");

                    b.ToTable("Uloga");
                });

            modelBuilder.Entity("eBiblioteka.Database.VrsteBiblioteka", b =>
                {
                    b.Property<int>("VrsteBibliotekaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VrsteBibliotekaID");

                    b.ToTable("VrsteBiblioteka");
                });

            modelBuilder.Entity("eBiblioteka.Database.Zanr", b =>
                {
                    b.Property<int>("ZanrID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZanrID");

                    b.ToTable("Zanr");
                });

            modelBuilder.Entity("eBiblioteka.Database.Zaposlenik", b =>
                {
                    b.Property<int>("ZaposlenikID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Aktivan")
                        .HasColumnType("bit");

                    b.Property<int>("BibliotekaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UlogaID")
                        .HasColumnType("int");

                    b.HasKey("ZaposlenikID");

                    b.HasIndex("BibliotekaID");

                    b.HasIndex("GradID");

                    b.HasIndex("UlogaID");

                    b.ToTable("Zaposlenik");
                });

            modelBuilder.Entity("eBiblioteka.Database.Biblioteka", b =>
                {
                    b.HasOne("eBiblioteka.Database.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBiblioteka.Database.VrsteBiblioteka", "VrsteBiblioteka")
                        .WithMany()
                        .HasForeignKey("VrsteBibliotekaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grad");

                    b.Navigation("VrsteBiblioteka");
                });

            modelBuilder.Entity("eBiblioteka.Database.Clan", b =>
                {
                    b.HasOne("eBiblioteka.Database.Biblioteka", "Biblioteka")
                        .WithMany()
                        .HasForeignKey("BibliotekaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBiblioteka.Database.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBiblioteka.Database.Uloga", "Uloga")
                        .WithMany()
                        .HasForeignKey("UlogaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Biblioteka");

                    b.Navigation("Grad");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eBiblioteka.Database.Clanarina", b =>
                {
                    b.HasOne("eBiblioteka.Database.Clan", "Clan")
                        .WithMany()
                        .HasForeignKey("ClanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBiblioteka.Database.TipClanarine", "TipClanarine")
                        .WithMany()
                        .HasForeignKey("TipClanarineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clan");

                    b.Navigation("TipClanarine");
                });

            modelBuilder.Entity("eBiblioteka.Database.Grad", b =>
                {
                    b.HasOne("eBiblioteka.Database.Drzava", "Drzava")
                        .WithMany()
                        .HasForeignKey("DrzavaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drzava");
                });

            modelBuilder.Entity("eBiblioteka.Database.Knjiga", b =>
                {
                    b.HasOne("eBiblioteka.Database.Biblioteka", "Biblioteka")
                        .WithMany()
                        .HasForeignKey("BibliotekaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBiblioteka.Database.Zanr", "Zanr")
                        .WithMany()
                        .HasForeignKey("ZanrID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Biblioteka");

                    b.Navigation("Zanr");
                });

            modelBuilder.Entity("eBiblioteka.Database.KnjigaPisac", b =>
                {
                    b.HasOne("eBiblioteka.Database.Knjiga", "Knjiga")
                        .WithMany()
                        .HasForeignKey("KnjigaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBiblioteka.Database.Pisac", "Pisac")
                        .WithMany()
                        .HasForeignKey("PisacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knjiga");

                    b.Navigation("Pisac");
                });

            modelBuilder.Entity("eBiblioteka.Database.KnjigaZanr", b =>
                {
                    b.HasOne("eBiblioteka.Database.Knjiga", "Knjiga")
                        .WithMany()
                        .HasForeignKey("KnjigaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBiblioteka.Database.Zanr", "Zanr")
                        .WithMany()
                        .HasForeignKey("ZanrID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knjiga");

                    b.Navigation("Zanr");
                });

            modelBuilder.Entity("eBiblioteka.Database.RezervacijaKnjige", b =>
                {
                    b.HasOne("eBiblioteka.Database.Clan", "Clan")
                        .WithMany()
                        .HasForeignKey("ClanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBiblioteka.Database.Knjiga", "Knjiga")
                        .WithMany()
                        .HasForeignKey("KnjigaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clan");

                    b.Navigation("Knjiga");
                });

            modelBuilder.Entity("eBiblioteka.Database.Zaposlenik", b =>
                {
                    b.HasOne("eBiblioteka.Database.Biblioteka", "Biblioteka")
                        .WithMany()
                        .HasForeignKey("BibliotekaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBiblioteka.Database.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBiblioteka.Database.Uloga", "Uloga")
                        .WithMany()
                        .HasForeignKey("UlogaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Biblioteka");

                    b.Navigation("Grad");

                    b.Navigation("Uloga");
                });
#pragma warning restore 612, 618
        }
    }
}
